-- Quartus Prime VHDL Template
-- Single-Port ROM

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

--===========================================================================
--                        Define input/output ports
--===========================================================================
entity single_port_rom is
   generic (
      DATA_WIDTH : natural := 8;
      ADDR_WIDTH : natural := 8);
   port  (
      clk      : in std_logic;
      addr     : in std_logic_vector(7 downto 0);
      q        : out std_logic_vector((DATA_WIDTH -1) downto 0));
end entity;

architecture rtl of single_port_rom is

   -- Build a 2-D array type for the ROM
   subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
   type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

   signal rom : memory_t := memory_t'(

      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000", x"00000",
      x"00000", x"00004", x"00003", x"00002", x"b7001", x"00003", x"00002", x"b6001",
      x"00003", x"00002", x"b5001", x"00003", x"00002", x"b4001", x"00003", x"00002",
      x"b3001", x"00003", x"00002", x"b2001", x"31ac1", x"2c0f1", x"2d0b1", x"00001"                                                                                                  
   );

begin

   process(clk)
   begin
   if(rising_edge(clk)) then
      q <= rom(to_integer(unsigned(addr(7 downto 0))));
   end if;
   end process;

end rtl;
